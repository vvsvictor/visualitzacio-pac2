boxplot(df$Compra ~ df$Sat, main = "Compra segons Sat", xlab = "Sat", ylab = "Compra")
boxplot(df$Servicio ~ df$Sat, main = "Servicio segons Sat", xlab = "Sat", ylab = "Servicio")
boxplot(df$Maletas ~ df$Sat, main = "Maletas segons Sat", xlab = "Sat", ylab = "Maletas")
hist(x = df$Retr_LL, main = "Histograma temps de retard en l'arribada a destinació", xlab = "Retard", ylab = "Frequència")
qqnorm(df$Retr_LL)
qqline(df$Retr_LL, col = "red")
#Funció per calcular l'interval de confiança
calc_ic <- function(data) {
n <- length(data)
mean_data <- mean(data)
sd_data <- sd(data)
SEM <- sd_data / sqrt(n)
t_value <- qt(0.975, df = n - 1)
CI_lower <- mean_data - t_value * SEM
CI_upper <- mean_data + t_value * SEM
return(c(CI_lower, CI_upper))
}
print(paste("Interval de confiança: ", calc_ic(df$Retr_LL)))
satisfets <- df[df$Sat == "S",]
insatisfets <- df[df$Sat == "I",]
print(paste("Interval de confiança satisfets: ", calc_ic(satisfets$Retr_LL)))
print(paste("Interval de confiança insatisfets: ", calc_ic(insatisfets$Retr_LL)))
prop_satisfets <- df %>%
group_by(Tipo) %>%
summarise(Proporció_Satisfets = mean(Sat == "S"))
# Gràfic de barres
ggplot(prop_satisfets, aes(x = Tipo, y = Proporció_Satisfets)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
ggtitle("Proporció de Viatgers Satisfets segons el Tipo") +
xlab("Tipo de Viatge") +
ylab("Proporció de Satisfacció")
test_proporcions_z <- function(x1, n1, x2, n2, conf_level) {
# Proporcions
p1 <- x1 / n1
p2 <- x2 / n2
# Proporció combinada
p_c <- (x1 + x2) / (n1 + n2)
# Estadístic Z
z <- (p1 - p2) / sqrt(p_c * (1 - p_c) * (1/n1 + 1/n2))
# p-valor
p_valor <- 2 * (1 - pnorm(abs(z)))
# Valor crític
z_crític <- qnorm(1 - (1 - conf_level) / 2)
resultats <- data.frame(
Estadístic_Observat = z,
Valor_Crític = z_crític,
P_Valor = p_valor
)
return(resultats)
}
n_satisfets_negocis <- sum(df$Sat == "S" & df$Tipo == "Negocios")
n_negocis <- sum(df$Tipo == "Negocios")
n_satisfets_oci <- sum(df$Sat == "S" & df$Tipo == "Ocio")
n_oci <- sum(df$Tipo == "Ocio")
test <- test_proporcions_z(n_satisfets_negocis, n_negocis, n_satisfets_oci, n_oci, conf_level = 0.97)
print(test)
#Generarem una nova variable per representar la satisfacció
df$Sat_Num <- ifelse(df$Sat == "S", 1, 0)
# Separem per Negocis i Oci
dat_negocis <- filter(df, Tipo == "Negocios")$Sat_Num
dat_oci <- filter(df, Tipo == "Ocio")$Sat_Num
resultat_test <- wilcox.test(dat_negocis, dat_oci)
print(resultat_test)
model <- lm(Retr_LL ~ Sat + Retr_SA + Tipo + Tarifa + Comida, data = df)
summary(model)
model_logistic <- glm(Sat_Num ~ . - Tarifa, data = df, family = binomial())
summary(model_logistic)
model_logistic <- glm(Sat_Num ~ . - Sat - Tarifa, data = df, family = binomial())
summary(model_logistic)
library(broom)
tidy_model <- tidy(model_logistic)
tipo_coef <- tidy_model %>%
filter(grepl("Tipo", term)) %>%
mutate(
OR = exp(estimate),
CI_lower = exp(estimate - 1.96 * std.error),
CI_upper = exp(estimate + 1.96 * std.error)
)
tipo_coef
prediccions <- predict(model_logistic, type = "response")
#Transformo les probabilitats a etiquetes
etiquetes <- ifelse(prediccions >= 0.5, 1, 0)
matriu_confusio <- table(Observat = df$Sat, Predicció = etiquetes)
prediccions <- predict(model_logistic, type = "response")
#Transformo les probabilitats a etiquetes
etiquetes <- ifelse(prediccions >= 0.5, 1, 0)
matriu_confusio <- table(Observat = df$Sat, Predicció = etiquetes)
sensibilitat <- table_real_pred[2, 2] / sum(table_real_pred[2, ])
prediccions <- predict(model_logistic, type = "response")
#Transformo les probabilitats a etiquetes
etiquetes <- ifelse(prediccions >= 0.5, 1, 0)
matriu_confusio <- table(Observat = df$Sat, Predicció = etiquetes)
sensibilitat <- matriu_confusio[2, 2] / sum(matriu_confusio[2, ])
especificitat <- matriu_confusio[1, 1] / sum(matriu_confusio[1, ])
prediccions <- predict(model_logistic, type = "response")
#Transformo les probabilitats a etiquetes
etiquetes <- ifelse(prediccions >= 0.5, 1, 0)
matriu_confusio <- table(Observat = df$Sat, Predicció = etiquetes)
sensibilitat <- matriu_confusio[2, 2] / sum(matriu_confusio[2, ])
especificitat <- matriu_confusio[1, 1] / sum(matriu_confusio[1, ])
print("Matriu confusió")
print(matriu_confusio)
print(paste("Sensibilitat: ", sensibilitat))
print(paste("Especificitat: ", especificitat))
prediccio <- predict(model_logistic, newdata = df[11, ], type = "response")
print(prediccio)
print(res_anova)
#Ajustem el model anova
model_anova <- aov(Retr_LL ~ Servicio, data = df)
res_anova <- summary(model_anova)
print(res_anova)
#Ajustem el model anova
model_anova <- aov(Retr_LL ~ Servicio, data = df)
res_anova <- summary(model_anova)
print(res_anova)
#Obtenim SST
SSB <- anova_res[[1]]["Servicio", "Sum Sq"]
#Ajustem el model anova
model_anova <- aov(Retr_LL ~ Servicio, data = df)
res_anova <- summary(model_anova)
print(res_anova)
#Obtenim SST
SSB <- res_anova[[1]]["Servicio", "Sum Sq"]
SSW <- res_anova[[1]]["Residuals", "Sum Sq"]
SST <- SSB + SSW
# Calculem els graus de llibertat
df_B <- res_anova[[1]]["Servicio", "Df"]
df_W <- res_anova[[1]]["Residuals", "Df"]
df_T <- df_B + df_W
# Calculem el valor F
mean_sq_B <- res_anova[[1]]["Servicio", "Mean Sq"]
mean_sq_W <- res_anova[[1]]["Residuals", "Mean Sq"]
F_valor_calculat <- mean_sq_B / mean_sq_W
# Mostrar els valors calculats
cat("SST:", SST, "\nSSB:", SSB, "\nSSW:", SSW, "\nDF Total:", df_T, "\nValor F Obtingut:", F_valor_calculat, "\n")
R2 <- SSB / SST
print(paste("R^2: ", R2))
qqnorm(residuals(model_anova))
qqline(residuals(model_anova), col = "red")
shapiro.test(residuals(model_anova))
set.seed(42)
shapiro.test(sample(residuals(model_anova), 5000))
plot(fitted(model_anova), residuals(model_anova), xlab = "Valors Ajustats", ylab = "Residus")
abline(h = 0, col = "red")
kruskal_test <- kruskal.test(Retr_LL ~ Servicio, data = df)
print(kruskal_test)
kruskal_test <- kruskal.test(Retr_LL ~ Servicio, data = df)
summary(kruskal_test)
kruskal_test <- kruskal.test(Retr_LL ~ Servicio, data = df)
print(kruskal_test)
kruskal_test <- kruskal.test(Retr_LL ~ Servicio, data = df)
print(kruskal_test)
interaction.plot(df$Tarifa, df$Servicio, df$Retr_LL,
col = as.integer(df$Servicio),
pch = as.integer(df$Tarifa),
xlab = "Tarifa",
ylab = "Temps de Retard",
legend = TRUE)
interaction.plot(df$Servicio, df$Tarifa, df$Retr_LL,
col = as.factor(df$Servicio),
pch = 19,
xlab = "Servicio",
ylab = "Temps de Retard",
legend = TRUE)
model_anova_multif <- aov(Retard ~ Servicio * Tarifa, data = df)
model_anova_multif <- aov(Retr_LL ~ Servicio * Tarifa, data = df)
model_anova_multif <- aov(Retr_LL ~ Servicio * Tarifa, data = df)
summary(model_anova_multifactorial)
model_anova_multif <- aov(Retr_LL ~ Servicio * Tarifa, data = df)
summary(model_anova_multif)
qqnorm(residuals(model_anova_multif))
qqline(residuals(model_anova_multif), col = "red")
plot(model_anova_multifactorial$fitted.values, residuals(model_anova_multifactorial),
xlab = "Valors Ajustats", ylab = "Residus", main = "Residus vs Valors Ajustats")
plot(model_anova_multifactorial$fitted.values, residuals(model_anova_multif),
xlab = "Valors Ajustats", ylab = "Residus")
plot(model_anova_multif$fitted.values, residuals(model_anova_multif),
xlab = "Valors Ajustats", ylab = "Residus")
abline(h = 0, col = "red")
# Aplicar el test de Scheffé
scheffe_resultats <- glht(aov(Retard ~ Servicio * Tarifa, data = df), linfct = mcp(Servicio = "Scheffe"))
install.packages("multcomp")
library(multcomp)
# Aplicar el test de Scheffé
scheffe_resultats <- glht(aov(Retard ~ Servicio * Tarifa, data = df), linfct = mcp(Servicio = "Scheffe"))
library(multcomp)
# Aplicar el test de Scheffé
scheffe_resultats <- glht(aov(Retr_LL ~ Servicio * Tarifa, data = df), linfct = mcp(Servicio = "Scheffe"))
tukey_result <- TukeyHSD(model_anova_multif)
library(multcomp)
# Aplicar el test de tukey
res <- TukeyHSD(model_anova_multif)
print(res)
install.packages("tidyverse")
install.packages("hrbrthemes")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("jeromefroe/circlepackeR")
View(res)
data <- read.csv("densitat.csv")
data <- read.csv("./densitat.csv")
data <- read.csv("C:\Users\Victor\Documents\uoc\Visualització de dades\PAC2\densitat.csv")
setwd("C:/Users/Victor/Documents/uoc/Visualització de dades/PAC2")
data <- read.csv("./densitat.csv")
data <- read.csv("densitat.csv", skip=7)
View(data)
data <- read.csv("densitat.csv", skip=7, sep = ";")
data <- read.csv("densitat.csv", skip=7, sep = ";")
# Libraries
library(tidyverse)
library(hrbrthemes)
data <- read.csv("densitat.csv", skip=7, sep = ";")
library(tidyverse)
library(hrbrthemes)
install.packages("hrbrthemes")
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("extrafontdb")
extrafontdb
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("Rttf2pt1")
Rttf2pt1
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("hrbrthemes")
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("fontBitstreamVera")
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("fontLiberation")
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("hrbrthemes")
# Libraries
library(tidyverse)
library(hrbrthemes)
# Libraries
library(tidyverse)
library(hrbrthemes)
install.packages("gfonts")
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/11_SevCatOneNumNestedOneObsPerGroup.csv", header=T, sep=";")
data[ which(data$value==-1),"value"] <- 1
colnames(data) <- c("Continent", "Region", "Country", "Pop")
# Remove a few problematic lines
data <- data %>% filter(Continent!="") %>% droplevels()
# Change the format. This use the data.tree library. This library needs a column that looks like root/group/subgroup/..., so I build it
library(data.tree)
data$pathString <- paste("world", data$Continent, data$Region, data$Country, sep = "/")
population <- as.Node(data)
# You can custom the minimum and maximum value of the color range.
circlepackeR(population, size = "Pop", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
p <- circlepackeR(data, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/11_SevCatOneNumNestedOneObsPerGroup.csv", header=T, sep=";")
data[ which(data$value==-1),"value"] <- 1
colnames(data) <- c("Continent", "Region", "Country", "Pop")
# Remove a few problematic lines
data <- data %>% filter(Continent!="") %>% droplevels()
# Change the format. This use the data.tree library. This library needs a column that looks like root/group/subgroup/..., so I build it
library(data.tree)
data$pathString <- paste("world", data$Continent, data$Region, data$Country, sep = "/")
population <- as.Node(data)
# You can custom the minimum and maximum value of the color range.
circlepackeR(population, size = "Pop", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
p <- circlepackeR(data, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data$Densitat <- as.numeric(data$Densitat)
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
p <- circlepackeR(data, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data$Densitat <- as.numeric(data$Densitat)
data$Superficie <- NULL
data$Poblacio <- NULL
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
p <- circlepackeR(data, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data$Densitat <- as.numeric(data$Densitat)
data$Superficie <- NULL
data$Població <- NULL
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
p <- circlepackeR(data, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data$Densitat <- as.numeric(data$Densitat)
data$Superficie <- NULL
data$Població <- NULL
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data$Densitat <- as.numeric(data$Densitat)
data$Superficie <- NULL
data$Població <- NULL
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
# Assuming you want to remove columns you mentioned
data <- data %>% select(-Superficie, -Població)
# Construct the path string for the circle packing
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
# Convert the data frame to a data.tree structure
densitat <- as.Node(data)
# Generate the circle packing visualization
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
# Load dataset from github
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/11_SevCatOneNumNestedOneObsPerGroup.csv", header=T, sep=";")
data[ which(data$value==-1),"value"] <- 1
colnames(data) <- c("Continent", "Region", "Country", "Pop")
# Remove a few problematic lines
data <- data %>% filter(Continent!="") %>% droplevels()
# Change the format. This use the data.tree library. This library needs a column that looks like root/group/subgroup/..., so I build it
library(data.tree)
data$pathString <- paste("world", data$Continent, data$Region, data$Country, sep = "/")
population <- as.Node(data)
# You can custom the minimum and maximum value of the color range.
circlepackeR(population, size = "Pop", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep = ";")
data$Densitat = gsub(",", ".", data$Densitat)
data$Densitat <- as.numeric(data$Densitat)
data$Superficie <- NULL
data$Població <- NULL
data$pathString = paste("Catalunya", data$Provincia, data$Comarca, sep = "/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size = "Densitat", color_min = "hsl(56,80%,80%)", color_max = "hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
# Assuming you want to remove columns you mentioned
data <- data %>% select(-Superficie, -Població)
# Construct the path string for the circle packing
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
# Convert the data frame to a data.tree structure
densitat <- as.Node(data)
# Generate the circle packing visualization
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
data <- read.csv("densitat.csv", skip=7, sep=";")
# Convert comma to dot for numeric conversion
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
# Remove unnecessary columns
data <- data %>% select(-Superficie, -Població)
# Create a path string needed for circlepackeR
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
# Convert the data frame to a tree structure
densitat <- as.Node(data)
# Generate the circle pack
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
data <- read.csv("densitat.csv", skip=7, sep=";")
# Convert comma to dot for numeric conversion
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
# Remove unnecessary columns
data <- data %>% select(-Superficie, -Població)
# Create a path string needed for circlepackeR
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
# Convert the data frame to a tree structure
densitat <- as.Node(data)
# Generate the circle pack
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
saveWidget(p, 'circlepacker_visualization.html', selfcontained = TRUE)
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
library(htmlwidgets)
saveWidget(p, 'circlepacker_visualization.html', selfcontained = TRUE)
library(htmlwidgets)
saveWidget
saveWidget(p, 'circlepacker_visualization.html', selfcontained = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
library(htmlwidgets)
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
saveWidget(p, 'circlepacker_visualization.html', selfcontained = TRUE)
circlepackeR.saveWidget(p, 'circlepacker_visualization.html', selfcontained = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(tidyverse)
library(hrbrthemes)
library(circlepackeR)
library(data.tree)
data <- read.csv("densitat.csv", skip=7, sep=";")
data$Densitat <- as.numeric(gsub(",", ".", data$Densitat))
data <- data %>% select(-Superficie, -Població)
data$pathString <- paste("Catalunya", data$Provincia, data$Comarca, sep="/")
densitat <- as.Node(data)
p <- circlepackeR(densitat, size="Densitat", color_min="hsl(56,80%,80%)", color_max="hsl(341,30%,40%)")
print(p)
library(htmlwidgets)
